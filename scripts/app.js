!function(e){function t(a){if(n[a])return n[a].exports;var r=n[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=n(2),o=a(i),s=n(37),l=function e(){function t(){var e=Math.floor(a.clientWidth*l),t=Math.floor(a.clientHeight*l);a.width===e&&a.height===t||(a.width=e,a.height=t,i.setSize(a.clientWidth,a.clientHeight,!1),c.resize(e,t))}function n(){t(),c.update(d.getDelta()),requestAnimationFrame(n)}if(r(this,e),!s())return void(document.body.innerHTML="Unable to initialize WebGL. Your browser may not support it.");var a=document.getElementById("canvas"),i=new THREE.WebGLRenderer({antialias:!0,alpha:!1,canvas:a}),l=window.devicePixelRatio||1;i.setPixelRatio(l);var c=new o.default(i);this.appViewer=c;var d=new THREE.Clock;n()};window.app=new l},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(3),s=a(o),l=n(5),c=a(l),d=n(6),u=a(d),f=n(26),h=a(f),p=n(28),m=a(p),v=n(29),g=a(v),E=n(30),_=a(E),x=n(34),T=a(x),y=n(35),b=a(y),w=n(36),M=new THREE.Raycaster,S=new THREE.Vector2,P=void 0,R=1,L=function(e){return Math.min(s.default.game.maxT,Math.max(-s.default.game.maxT,e))},C=function(){function e(t){r(this,e),this.renderer=t,this.renderer.setClearColor(s.default.renderer.clearColor,s.default.renderer.clearAlpha),this.renderer.setPixelRatio(s.default.renderer.devicePixelRatio),this.sceneManager=new u.default;var n=this.renderer.getContext();P=n.canvas.clientWidth/n.canvas.clientHeight;var a=s.default.camera.frustumSize*P/2,i=s.default.camera.frustumSize/2;this.camera=new THREE.OrthographicCamera(-a,a,i,-i,s.default.camera.near,s.default.camera.far),this.sceneReady=!1,document.addEventListener("sceneReady",this.onSceneReady.bind(this)),s.default.isMobile?(document.addEventListener("touchstart",this.onMouseDownTouchStart.bind(this)),document.addEventListener("touchmove",this.onMouseMoveTouchMove.bind(this)),document.addEventListener("touchend",this.onMouseUpTouchEnd.bind(this)),document.addEventListener("touchcancel",this.onMouseUpTouchEnd.bind(this))):(document.addEventListener("mousedown",this.onMouseDownTouchStart.bind(this)),document.addEventListener("mouseup",this.onMouseUpTouchEnd.bind(this)),document.addEventListener("mousemove",this.onMouseMoveTouchMove.bind(this)))}return i(e,[{key:"onSceneReady",value:function(){this.sceneReady=!0,this.controls=new h.default(this.camera,this.renderer.domElement),this.controls.resetCameraOrbit(),this.controls.setEnabled(!1),c.default.phasesSeq=[c.default.phases.PLAYER_ATTACK,c.default.phases.ENEMY_DEFENCE,c.default.phases.APPLY,c.default.phases.RESET,c.default.phases.ENEMY_ATTACK,c.default.phases.PLAYER_DEFENCE,c.default.phases.APPLY,c.default.phases.RESET],c.default.activePhaseIndex=6,c.default.activePhase=c.default.phasesSeq[c.default.activePhaseIndex],this.env=new m.default(this.sceneManager.assetsLoader.assets),this.sceneManager.scene.add(this.env.mesh),this.tracks=new g.default(this.sceneManager.assetsLoader.assets),this.sceneManager.scene.add(this.tracks.mesh),this.towers=new _.default(this.sceneManager.assetsLoader.assets),this.sceneManager.scene.add(this.towers.mesh),this.cards=new T.default(this.sceneManager.assetsLoader.assets),this.sceneManager.scene.add(this.cards.mesh),this.botLogic=new b.default(this),this.nextPhase()}},{key:"update",value:function(e){this.sceneReady&&(s.default.time+=e,this.renderer.render(this.sceneManager.scene,this.camera))}},{key:"_playerActive",value:function(){return c.default.activePhase===c.default.phases.PLAYER_ATTACK||c.default.activePhase===c.default.phases.PLAYER_DEFENCE}},{key:"_giveCardsToPlayer",value:function(e){for(var t=e?c.default.playerHand:c.default.enemyHand,n=0;n<4;++n)t[n]||this._giveCardToPlayer(e,n)}},{key:"_giveCardToPlayer",value:function(e,t){var n=e?c.default.playerHand:c.default.enemyHand;n[t]=(0,w.generateCard)(),e&&this.cards.updatePlayerCard(t,n[t])}},{key:"shuffleRemainingCards",value:function(e){for(var t=e?c.default.playerHand:c.default.enemyHand,n=0;n<4;++n)t[n]&&this._giveCardToPlayer(e,n)}},{key:"playCard",value:function(e,t,n){e&&this.cards.hideCard(t);var a=e?c.default.playerHand:c.default.enemyHand;this.tracks.spawnUnitOnTrack(e,n,a[t]);var r=e?0:1;c.default.towersT[r][n]=c.default.towersT[r][n]+a[t].price,this.towers.setTowerTemperature(e,n,c.default.towersT[r][n]),this.updateTemperatures(),a[t]=null}},{key:"nextPhase",value:function(){var e=this;c.default.activePhaseIndex+=1,c.default.activePhaseIndex===c.default.phasesSeq.length&&(c.default.activePhaseIndex=0),c.default.activePhase=c.default.phasesSeq[c.default.activePhaseIndex],c.default.activePhase===c.default.phases.ENEMY_ATTACK||c.default.activePhase===c.default.phases.ENEMY_DEFENCE?this.botLogic.makeTurn(c.default.activePhase===c.default.phases.ENEMY_ATTACK):c.default.activePhase===c.default.phases.RESET?(this.tracks.clearTracks(),this._giveCardsToPlayer(!0),this._giveCardsToPlayer(!1),this.nextPhase()):c.default.activePhase===c.default.phases.APPLY?(this._applyUnitsDamage(),setTimeout(function(){e._applyTowersBurn(),e._checkWinLose()||e.nextPhase()},1200)):this._playerActive()&&(c.default.usedShuffleThisTurn=!1,this.env.endButton.material.color=this.env.endButton.userData.defaultColor,this.env.shuffleButton.material.color=this.env.endButton.userData.defaultColor)}},{key:"_applyUnitsDamage",value:function(){for(var e=0;e<3;++e)this._applyUnitsDamageOnTrack(e)}},{key:"_applyUnitsDamageOnTrack",value:function(e){var t=this.tracks.applyDamageOnTrack(e);if(t){var n=t.playerWon?1:0;c.default.towersT[n][e]=c.default.towersT[n][e]+t.damage,this.towers.setTowerTemperature(!t.playerWon,e,c.default.towersT[n][e]),this.towers.updatePlayerTemperatures()}}},{key:"_applyTowersBurn",value:function(){for(var e=0;e<3;++e){for(var t=Math.abs(c.default.towersT[0][e]),n=Math.abs(c.default.towersT[1][e]),a=0,r=0,i=0;i<s.default.game.burn.length;++i)t>s.default.game.burn[i].t&&(a=s.default.game.burn[i].damage*Math.sign(c.default.towersT[0][e])),n>s.default.game.burn[i].t&&(r=s.default.game.burn[i].damage*Math.sign(c.default.towersT[1][e]));c.default.playerAdditiveT+=a,c.default.enemyAdditiveT+=r}this.updateTemperatures()}},{key:"_createGameOverScreen",value:function(e){var t=document.createElement("div");t.style.position="absolute",t.style.backgroundColor="white",t.style.opacity=.8,t.style.left=0,t.style.right=0,t.style.top=0,t.style.bottom=0,t.style.fontSize="140px",t.style.textAlign="center";var n=document.createTextNode(e);t.appendChild(n),document.body.appendChild(t)}},{key:"_checkWinLose",value:function(){var e=Math.abs(c.default.enemyT)>=s.default.game.maxT,t=Math.abs(c.default.playerT)>=s.default.game.maxT;return e?(this._createGameOverScreen("WIN!"),!0):!!t&&(this._createGameOverScreen("LOSE!"),!0)}},{key:"updateTemperatures",value:function(){var e=c.default.towersT;c.default.playerT=L((e[0][0]+e[0][1]+e[0][2])/3+c.default.playerAdditiveT),c.default.enemyT=L((e[1][0]+e[1][1]+e[1][2])/3+c.default.enemyAdditiveT),this.towers.updatePlayerTemperatures()}},{key:"onMouseDownTouchStart",value:function(e){var t=e.clientX,n=e.clientY;e.changedTouches&&e.changedTouches[0]&&(t=e.changedTouches[0].clientX,n=e.changedTouches[0].clientY),S.x=t/window.innerWidth*2-1,S.y=2*-(n/window.innerHeight)+1,M.setFromCamera(S,this.camera),c.default.isMouseDown=!0;var a=M.intersectObjects(this.cards.mesh.children);c.default.activeCard=a[0]?a[0].object:null,a=M.intersectObjects(this.env.mesh.children),a[0]&&this._playerActive()&&("shuffle_button"!==a[0].object.name||c.default.usedShuffleThisTurn?"end_button"===a[0].object.name&&(this.env.endButton.material.color=this.env.endButton.userData.inactiveColor,this.env.shuffleButton.material.color=this.env.endButton.userData.inactiveColor,this.nextPhase()):(c.default.usedShuffleThisTurn=!0,this.env.shuffleButton.material.color=this.env.endButton.userData.inactiveColor,this.shuffleRemainingCards(!0)))}},{key:"onMouseUpTouchEnd",value:function(){c.default.isMouseDown=!1,c.default.activeCard&&(c.default.activeCard.position.x=c.default.activeCard.userData.initPosX,c.default.activeCard.position.y=c.default.activeCard.userData.initPosY),c.default.activeTrack&&(c.default.activeTrack.material.color=c.default.activeTrack.userData.defaultColor),c.default.activeCard&&c.default.activeTrack&&!this.tracks.hasUnitOnTrack(!0,c.default.activeTrack.userData.index)&&this.playCard(!0,c.default.activeCard.userData.index,c.default.activeTrack.userData.index),c.default.activeCard=void 0}},{key:"onMouseMoveTouchMove",value:function(e){var t=e.clientX,n=e.clientY;e.changedTouches&&e.changedTouches[0]&&(t=e.changedTouches[0].clientX,n=e.changedTouches[0].clientY),S.x=t/window.innerWidth*2-1,S.y=2*-(n/window.innerHeight)+1,M.setFromCamera(S,this.camera),this._playerActive()&&this._updatePlayerControls()}},{key:"_updatePlayerControls",value:function(){this._processCardMovementIfNeeded();var e=M.intersectObjects(this.env.mesh.children),t=e[0]?e[0].object:null;c.default.usedShuffleThisTurn||(t&&"shuffle_button"===t.name?this.env.shuffleButton.material.color=this.env.shuffleButton.userData.selectedColor:this.env.shuffleButton.material.color=this.env.shuffleButton.userData.defaultColor),t&&"end_button"===t.name?this.env.endButton.material.color=this.env.endButton.userData.selectedColor:this.env.endButton.material.color=this.env.endButton.userData.defaultColor}},{key:"_processCardMovementIfNeeded",value:function(){if(c.default.activeCard){c.default.activeCard.position.x=S.x*R*P*.5,c.default.activeCard.position.y=S.y*R*.5;var e=M.intersectObjects(this.tracks.mesh.children),t=e[0]?e[0].object:null;t?c.default.activeTrack?c.default.activeTrack.uuid!==t.uuid&&(c.default.activeTrack.material.color=c.default.activeTrack.userData.defaultColor,c.default.activeTrack=t,c.default.activeTrack.material.color=c.default.activeTrack.userData.selectedColor):(c.default.activeTrack=t,c.default.activeTrack.material.color=c.default.activeTrack.userData.selectedColor):c.default.activeTrack&&(c.default.activeTrack.material.color=c.default.activeTrack.userData.defaultColor,c.default.activeTrack=null)}}},{key:"resize",value:function(e,t){P=e/t,P<.66&&(R=.66/P),this.camera.aspect!==P&&(this.camera.left=-R*s.default.camera.frustumSize*P/2,this.camera.right=R*s.default.camera.frustumSize*P/2,this.camera.top=R*s.default.camera.frustumSize/2,this.camera.bottom=-R*s.default.camera.frustumSize/2,this.camera.updateProjectionMatrix())}},{key:"dispose",value:function(){this.controls.dispose()}}]),e}();t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(4)(),r={isMobile:!a.desktop(),isDebug:"debug"===window.location.hash.substr(1),useDDSTextures:!0,usePVRTextures:!0,time:0,renderer:{clearColor:1315876,clearAlpha:!0,devicePixelRatio:window.devicePixelRatio||1},camera:{pos:[0,0,3],target:[0,0,0],frustumSize:1,near:.5,far:10},controls:{minDistance:1,maxDistance:500,rotateSpeed:.18},game:{maxT:10,burn:[{t:10,damage:2},{t:15,damage:3},{t:20,damage:4},{t:25,damage:5}]}};t.default=r},function(e,t,n){var a,r;!function(t){"use strict";var n=function(e,t){function n(t){return e.indexOf(t)!==-1}function a(e){var t;return t=new RegExp(e,"i"),l.className.match(t)}function r(e){a(e)||(l.className+=" "+e)}function i(e){a(e)&&(l.className=l.className.replace(e,""))}function o(t){var n=e.match(t);return n&&n.length>1&&n[1]||""}var s={},l=t||window.document.documentElement;e=(e||window.navigator.userAgent).toLowerCase(),s.ios=function(){return s.iphone()||s.ipod()||s.ipad()},s.iphone=function(){return n("iphone")},s.ipod=function(){return n("ipod")},s.ipad=function(){return n("ipad")},s.android=function(){return n("android")},s.androidPhone=function(){return s.android()&&n("mobile")},s.androidTablet=function(){return s.android()&&!n("mobile")},s.blackberry=function(){return n("blackberry")||n("bb10")||n("rim")},s.blackberryPhone=function(){return s.blackberry()&&!n("tablet")},s.blackberryTablet=function(){return s.blackberry()&&n("tablet")},s.windows=function(){return n("windows")},s.windowsPhone=function(){return s.windows()&&n("phone")},s.windowsTablet=function(){return s.windows()&&n("touch")&&!s.windowsPhone()},s.fxos=function(){return(n("(mobile;")||n("(tablet;"))&&n("; rv:")},s.fxosPhone=function(){return s.fxos()&&n("mobile")},s.fxosTablet=function(){return s.fxos()&&n("tablet")},s.meego=function(){return n("meego")},s.cordova=function(){return window.cordova&&"file:"===location.protocol},s.nodeWebkit=function(){return"object"==typeof window.process},s.bada=function(){return n("bada")},s.mobile=function(){return s.androidPhone()||s.iphone()||s.ipod()||s.windowsPhone()||s.blackberryPhone()||s.fxosPhone()||s.meego()},s.tablet=function(){return s.ipad()||s.androidTablet()||s.blackberryTablet()||s.windowsTablet()||s.fxosTablet()},s.desktop=function(){return!s.tablet()&&!s.mobile()},s.portrait=function(){return window.innerHeight/window.innerWidth>1},s.landscape=function(){return window.innerHeight/window.innerWidth<1},s.standAlone=function(){return window.navigator.standalone===!0},s.addClasses=function(){s._hasAddClasses||(s._hasAddClasses=!0,s.ios()?s.ipad()?r("ios ipad tablet"):s.iphone()?r("ios iphone mobile"):s.ipod()&&r("ios ipod mobile"):r(s.android()?s.androidTablet()?"android tablet":"android mobile":s.blackberry()?s.blackberryTablet()?"blackberry tablet":"blackberry mobile":s.windows()?s.windowsTablet()?"windows tablet":s.windowsPhone()?"windows mobile":"desktop":s.fxos()?s.fxosTablet()?"fxos tablet":"fxos mobile":s.meego()?"meego mobile":s.nodeWebkit()?"node-webkit":"desktop"),s.cordova()&&r("cordova"),s.standAlone()&&r("standalone"))};var c="";return s.ios()?(c=o(/os (\d+([_\s]\d+)*) like mac os x/i),c=c.replace(/[_\s]/g,".")):s.android()?c=o(/android[ \/-](\d+(\.\d+)*)/i):s.windowsPhone()?c=o(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):s.blackberry()?c=o(/rim\stablet\sos\s(\d+(\.\d+)*)/i):s.bada()&&(c=o(/bada\/(\d+(\.\d+)*)/i)),c&&(s.osversion=c),s.addOrientationClasses=function(){if(!s.hasOrientationListener){s.hasOrientationListener=!0;var e=function(){return s.landscape()?(i("portrait"),r("landscape")):(i("landscape"),r("portrait"))},t="onorientationchange"in window?"orientationchange":"resize";window.addEventListener?window.addEventListener(t,e,!1):window.attachEvent?window.attachEvent(t,e):window[t]=e,e()}},s};"undefined"!=typeof e&&e.exports?e.exports=n:(a=[],r=function(){return n}.apply(t,a),!(void 0!==r&&(e.exports=r)))}(this)},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={isMouseDown:!1,activeCard:void 0,activeTrack:void 0,phases:{RESET:0,PLAYER_ATTACK:1,ENEMY_ATTACK:2,PLAYER_DEFENCE:3,ENEMY_DEFENCE:4,APPLY:5},phasesSeq:[],activePhaseIndex:0,activePhase:null,usedShuffleThisTurn:!1,playerHand:{0:null,1:null,2:null,3:null},enemyHand:{0:null,1:null,2:null,3:null},playerAdditiveT:0,enemyAdditiveT:0,playerT:0,enemyY:0,towersT:[[0,0,0],[0,0,0]]};t.default=n},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),s=n(7),l=a(s),c=n(18),d=a(c),u=n(19),f=a(u),h=n(20),p=a(h),m=n(24),v=a(m),g=new Event("sceneReady"),E=function(){function e(){i(this,e),this.scene=new THREE.Scene,this.assetsLoader=new l.default(this.scene),this.materialDecorator=new p.default(f.default),this.batcher=new v.default(this.scene,this.materialDecorator),document.addEventListener("assetsLoaded",this.onAssetsLoaded.bind(this)),this.assetsLoader.loadAssets(d.default.assets)}return o(e,[{key:"onAssetsLoaded",value:function(){this.createSceneFromDescription(this.scene),this.scene.updateMatrixWorld(),this.materialDecorator.rewriteSingleMaterials(this.scene,this.assetsLoader.assets.textures),this.batcher.batchSameGeomIdUndecoratedMeshes({batchMeshesWithChildren:!0,excludeIfNameContains:[]}),document.dispatchEvent(g)}},{key:"createSceneFromDescription",value:function(e){this.addChildrenFromDescription(e,d.default.model.children)}},{key:"addChildrenFromDescription",value:function(e,t){var n=this,a=void 0;t.forEach(function(t){a=n.createObjectFromDescription(t),e.add(a),t.children&&t.children.length>0&&n.addChildrenFromDescription(a,t.children)})}},{key:"createObjectFromDescription",value:function(e){var t=null,n=null,a="Object3D";e.object&&e.object.type?a=e.object.type:e.type&&(a=e.type),e.object&&e.object.args?n=e.object.args:e.args&&(n=e.args);for(var i in n)n.hasOwnProperty(i)&&n[i].type&&"asset/texture"===n[i].type&&(n[i]=this.assetsLoader.assets.textures[n[i].name]);if("asset/json"===a)t=this.assetsLoader.assets.objects[e.name];else if("Mesh"===a||e.object&&e.object.geometry){var o=this.createObjectFromDescription(e.object.geometry),s=null;e.object.material&&(s=this.createObjectFromDescription(e.object.material)),t=new THREE.Mesh(o,s)}else t=n instanceof Array?new(Function.prototype.bind.apply(THREE[a],[null].concat(r(n)))):new THREE[a](n);return t||(t=new THREE.Object3D),e.properties&&this.addObjectProperties(t,e.properties),t}},{key:"addObjectProperties",value:function(e,t){var n=void 0,a=void 0;for(n in t)if(t.hasOwnProperty(n))if(t[n]instanceof Object){e[n]||(e[n]={});for(a in t[n])t[n].hasOwnProperty(a)&&(e[n][a]=t[n][a])}else e[n]=t[n]}}]),e}();t.default=E},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(3),s=a(o),l=n(8),c=new Event("assetsLoaded");window.THREE=window.THREE||THREE,n(16),n(17);var d=0,u=0,f=function(){function e(t){r(this,e),this.scene=t,this.assets={objects:{},textures:{}},this.objectLoader=new THREE.ObjectLoader,this.textureLoader=new THREE.TextureLoader,this.useDDS=!s.default.isIOS&&s.default.useDDSTextures,this.usePVR=s.default.isIOS&&s.default.usePVRTextures,this.DDSLoader=new THREE.DDSLoader,this.PVRLoader=new THREE.PVRLoader}return i(e,[{key:"loadAssets",value:function(e){var t=this,n=[],a=void 0,r=void 0,i=void 0,o=void 0,s=void 0;this.initProgressBar(),e.forEach(function(e){switch(e.type){case"json":r=e.path,o=t.objectLoader,s=t.assets.objects,i=e.name;break;case"texture":if(r=e.path,o=t.textureLoader,s=t.assets.textures,i=e.name,e.path instanceof Array)for(var l=0;l<e.path.length;l++){if(r=e.path[l],t.useDDS&&e.path[l].includes(".dds")){o=t.DDSLoader;break}if(t.usePVR&&e.path[l].includes(".pvr")){o=t.PVRLoader;break}}break;default:throw new Error("unknow asset type in sceneDescription: "+e.type)}a=t.loadEntry(r,s,i,o),n.push(a)}),Promise.all(n).then(function(){t.loadingFinished()})}},{key:"loadEntry",value:function(e,t,n,a){var r=this;return new Promise(function(i,o){a.load(e,function(e){t[n]=e,i()},function(e){s.default.isDebug&&console.log(e.loaded/e.total*100+"% loaded"),r.updateProgressBar(e.loaded,e.total,n)},function(e){console.log("error while loading model",e),o(e)})})}},{key:"initProgressBar",value:function(){this.progress=-1,this.assetsSizes={};var e=document.getElementById("progressBar");this.progressbar=new l.Line(e,{from:{color:"#557788"},to:{color:"#224455"},easing:"easeInOut",duration:1400,svgStyle:{display:"block",width:"100%",height:"100%",boxSizing:"border-box",borderRadius:"37px"},text:{value:"loading",style:{color:"#000",position:"absolute",left:"50%",top:"50%",padding:0,margin:0,fontWeight:"bold",fontSize:"6vh",transform:{prefix:!0,value:"translate(-50%, -50%)"}}},step:function(e,t){t.path.setAttribute("stroke",e.color)}})}},{key:"loadingFinished",value:function(){var e=document.getElementById("loadingScreen");e.className="loadingScreen-hidden",setTimeout(function(){e.style.display="none"},700),document.dispatchEvent(c)}},{key:"updateProgressBar",value:function(e,t,n){if(!this.assetsSizes[n]&&!isNaN(t)&&t>0&&(this.assetsSizes[n]={},this.assetsSizes[n].loaded=e,this.assetsSizes[n].size=t),this.assetsSizes[n]&&!isNaN(t)&&!isNaN(e)){d=0,u=0,this.assetsSizes[n].loaded=e;for(var a in this.assetsSizes)this.assetsSizes.hasOwnProperty(a)&&(d+=this.assetsSizes[a].loaded,u+=this.assetsSizes[a].size);this.progress=Math.max(d/u,this.progress),this.progressbar.set(this.progress)}}}]),e}();t.default=f},function(e,t,n){e.exports={Line:n(9),Circle:n(14),SemiCircle:n(15),Path:n(11),Shape:n(10),utils:n(13)}},function(e,t,n){var a=n(10),r=n(13),i=function(e,t){this._pathTemplate="M 0,{center} L 100,{center}",a.apply(this,arguments)};i.prototype=new a,i.prototype.constructor=i,i.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 "+t.strokeWidth),e.setAttribute("preserveAspectRatio","none")},i.prototype._pathString=function(e){return r.render(this._pathTemplate,{center:e.strokeWidth/2})},i.prototype._trailString=function(e){return this._pathString(e)},e.exports=i},function(e,t,n){var a=n(11),r=n(13),i="Object is destroyed",o=function e(t,n){if(!(this instanceof e))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=r.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},n,!0),r.isObject(n)&&void 0!==n.svgStyle&&(this._opts.svgStyle=n.svgStyle),r.isObject(n)&&r.isObject(n.text)&&void 0!==n.text.style&&(this._opts.text.style=n.text.style);var i,o=this._createSvgView(this._opts);if(i=r.isString(t)?document.querySelector(t):t,!i)throw new Error("Container does not exist: "+t);this._container=i,this._container.appendChild(o.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&r.setStyles(o.svg,this._opts.svgStyle),this.svg=o.svg,this.path=o.path,this.trail=o.trail,this.text=null;var s=r.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new a(o.path,s),r.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};o.prototype.animate=function(e,t,n){if(null===this._progressPath)throw new Error(i);this._progressPath.animate(e,t,n)},o.prototype.stop=function(){if(null===this._progressPath)throw new Error(i);void 0!==this._progressPath&&this._progressPath.stop()},o.prototype.destroy=function(){if(null===this._progressPath)throw new Error(i);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},o.prototype.set=function(e){if(null===this._progressPath)throw new Error(i);this._progressPath.set(e)},o.prototype.value=function(){if(null===this._progressPath)throw new Error(i);return void 0===this._progressPath?0:this._progressPath.value()},o.prototype.setText=function(e){if(null===this._progressPath)throw new Error(i);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),r.isObject(e)?(r.removeChildren(this.text),this.text.appendChild(e)):this.text.innerHTML=e},o.prototype._createSvgView=function(e){var t=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(t,e);var n=null;(e.trailColor||e.trailWidth)&&(n=this._createTrail(e),t.appendChild(n));var a=this._createPath(e);return t.appendChild(a),{svg:t,path:a,trail:n}},o.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 100")},o.prototype._createPath=function(e){var t=this._pathString(e);return this._createPathElement(t,e)},o.prototype._createTrail=function(e){var t=this._trailString(e),n=r.extend({},e);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(t,n)},o.prototype._createPathElement=function(e,t){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",e),n.setAttribute("stroke",t.color),n.setAttribute("stroke-width",t.strokeWidth),t.fill?n.setAttribute("fill",t.fill):n.setAttribute("fill-opacity","0"),n},o.prototype._createTextContainer=function(e,t){var n=document.createElement("div");n.className=e.text.className;var a=e.text.style;return a&&(e.text.autoStyleContainer&&(t.style.position="relative"),r.setStyles(n,a),a.color||(n.style.color=e.color)),this._initializeTextContainer(e,t,n),n},o.prototype._initializeTextContainer=function(e,t,n){},o.prototype._pathString=function(e){throw new Error("Override this function for each progress bar")},o.prototype._trailString=function(e){throw new Error("Override this function for each progress bar")},o.prototype._warnContainerAspectRatio=function(e){if(this.containerAspectRatio){var t=window.getComputedStyle(e,null),n=parseFloat(t.getPropertyValue("width"),10),a=parseFloat(t.getPropertyValue("height"),10);r.floatEquals(this.containerAspectRatio,n/a)||(console.warn("Incorrect aspect ratio of container","#"+e.id,"detected:",t.getPropertyValue("width")+"(width)","/",t.getPropertyValue("height")+"(height)","=",n/a),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},e.exports=o},function(e,t,n){var a=n(12),r=n(13),i={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},o=function e(t,n){if(!(this instanceof e))throw new Error("Constructor was called without new keyword");n=r.extend({duration:800,easing:"linear",from:{},to:{},step:function(){}},n);var a;a=r.isString(t)?document.querySelector(t):t,this.path=a,this._opts=n,this._tweenable=null;var i=this.path.getTotalLength();this.path.style.strokeDasharray=i+" "+i,this.set(0)};o.prototype.value=function(){var e=this._getComputedDashOffset(),t=this.path.getTotalLength(),n=1-e/t;return parseFloat(n.toFixed(6),10)},o.prototype.set=function(e){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(e);var t=this._opts.step;if(r.isFunction(t)){var n=this._easing(this._opts.easing),a=this._calculateTo(e,n),i=this._opts.shape||this;t(a,i,this._opts.attachment)}},o.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},o.prototype.animate=function(e,t,n){t=t||{},r.isFunction(t)&&(n=t,t={});var i=r.extend({},t),o=r.extend({},this._opts);t=r.extend(o,t);var s=this._easing(t.easing),l=this._resolveFromAndTo(e,s,i);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),d=this._progressToOffset(e),u=this;this._tweenable=new a,this._tweenable.tween({from:r.extend({offset:c},l.from),to:r.extend({offset:d},l.to),duration:t.duration,easing:s,step:function(e){u.path.style.strokeDashoffset=e.offset;var n=t.shape||u;t.step(e,n,t.attachment)},finish:function(e){r.isFunction(n)&&n()}})},o.prototype._getComputedDashOffset=function(){var e=window.getComputedStyle(this.path,null);return parseFloat(e.getPropertyValue("stroke-dashoffset"),10)},o.prototype._progressToOffset=function(e){var t=this.path.getTotalLength();return t-e*t},o.prototype._resolveFromAndTo=function(e,t,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(t),to:this._calculateTo(e,t)}},o.prototype._calculateFrom=function(e){return a.interpolate(this._opts.from,this._opts.to,this.value(),e)},o.prototype._calculateTo=function(e,t){return a.interpolate(this._opts.from,this._opts.to,e,t)},o.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},o.prototype._easing=function(e){return i.hasOwnProperty(e)?i[e]:e},e.exports=o},function(e,t,n){(function(){var t=this||Function("return this")(),n=function(){"use strict";function n(){}function a(e,t){var n;for(n in e)Object.hasOwnProperty.call(e,n)&&t(n)}function r(e,t){return a(t,function(n){e[n]=t[n]}),e}function i(e,t){a(t,function(n){"undefined"==typeof e[n]&&(e[n]=t[n])})}function o(e,t,n,a,r,i,o){var l,c,d,u=e<i?0:(e-i)/r;for(l in t)t.hasOwnProperty(l)&&(c=o[l],d="function"==typeof c?c:f[c],t[l]=s(n[l],a[l],d,u));return t}function s(e,t,n,a){return e+(t-e)*n(a)}function l(e,t){var n=u.prototype.filter,r=e._filterArgs;a(n,function(a){"undefined"!=typeof n[a][t]&&n[a][t].apply(e,r)})}function c(e,t,n,a,r,i,s,c,d,u,f){_=t+n+a,x=Math.min(f||E(),_),T=x>=_,y=a-(_-x),e.isPlaying()&&(T?(d(s,e._attachment,y),e.stop(!0)):(e._scheduleId=u(e._timeoutHandler,v),l(e,"beforeTween"),x<t+n?o(1,r,i,s,1,1,c):o(x,r,i,s,a,t+n,c),l(e,"afterTween"),d(r,e._attachment,y)))}function d(e,t){var n={},r=typeof t;return"string"===r||"function"===r?a(e,function(e){n[e]=t}):a(e,function(e){n[e]||(n[e]=t[e]||p)}),n}function u(e,t){this._currentState=e||{},this._configured=!1,this._scheduleFunction=h,"undefined"!=typeof t&&this.setConfig(t)}var f,h,p="linear",m=500,v=1e3/60,g=Date.now?Date.now:function(){return+new Date},E="undefined"!=typeof SHIFTY_DEBUG_NOW?SHIFTY_DEBUG_NOW:g;h="undefined"!=typeof window?window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.mozCancelRequestAnimationFrame&&window.mozRequestAnimationFrame||setTimeout:setTimeout;var _,x,T,y;return u.prototype.tween=function(e){return this._isTweening?this:(void 0===e&&this._configured||this.setConfig(e),this._timestamp=E(),this._start(this.get(),this._attachment),this.resume())},u.prototype.setConfig=function(e){e=e||{},this._configured=!0,this._attachment=e.attachment,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=e.start||n,this._step=e.step||n,this._finish=e.finish||n,this._duration=e.duration||m,this._currentState=r({},e.from||this.get()),this._originalState=this.get(),this._targetState=r({},e.to||this.get());var t=this;this._timeoutHandler=function(){c(t,t._timestamp,t._delay,t._duration,t._currentState,t._originalState,t._targetState,t._easing,t._step,t._scheduleFunction)};var a=this._currentState,o=this._targetState;return i(o,a),this._easing=d(a,e.easing||p),this._filterArgs=[a,this._originalState,o,this._easing],l(this,"tweenCreated"),this},u.prototype.get=function(){return r({},this._currentState)},u.prototype.set=function(e){this._currentState=e},u.prototype.pause=function(){return this._pausedAtTime=E(),this._isPaused=!0,this},u.prototype.resume=function(){return this._isPaused&&(this._timestamp+=E()-this._pausedAtTime),this._isPaused=!1,this._isTweening=!0,this._timeoutHandler(),this},u.prototype.seek=function(e){e=Math.max(e,0);var t=E();return this._timestamp+e===0?this:(this._timestamp=t-e,this.isPlaying()||(this._isTweening=!0,this._isPaused=!1,c(this,this._timestamp,this._delay,this._duration,this._currentState,this._originalState,this._targetState,this._easing,this._step,this._scheduleFunction,t),this.pause()),this)},u.prototype.stop=function(e){
return this._isTweening=!1,this._isPaused=!1,this._timeoutHandler=n,(t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.oCancelAnimationFrame||t.msCancelAnimationFrame||t.mozCancelRequestAnimationFrame||t.clearTimeout)(this._scheduleId),e&&(l(this,"beforeTween"),o(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),l(this,"afterTween"),l(this,"afterTweenEnd"),this._finish.call(this,this._currentState,this._attachment)),this},u.prototype.isPlaying=function(){return this._isTweening&&!this._isPaused},u.prototype.setScheduleFunction=function(e){this._scheduleFunction=e},u.prototype.dispose=function(){var e;for(e in this)this.hasOwnProperty(e)&&delete this[e]},u.prototype.filter={},u.prototype.formula={linear:function(e){return e}},f=u.prototype.formula,r(u,{now:E,each:a,tweenProps:o,tweenProp:s,applyFilter:l,shallowCopy:r,defaults:i,composeEasingObject:d}),"function"==typeof SHIFTY_DEBUG_NOW&&(t.timeoutHandler=c),e.exports=u,u}();!function(){n.shallowCopy(n.prototype.formula,{easeInQuad:function(e){return Math.pow(e,2)},easeOutQuad:function(e){return-(Math.pow(e-1,2)-1)},easeInOutQuad:function(e){return(e/=.5)<1?.5*Math.pow(e,2):-.5*((e-=2)*e-2)},easeInCubic:function(e){return Math.pow(e,3)},easeOutCubic:function(e){return Math.pow(e-1,3)+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*Math.pow(e,3):.5*(Math.pow(e-2,3)+2)},easeInQuart:function(e){return Math.pow(e,4)},easeOutQuart:function(e){return-(Math.pow(e-1,4)-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},easeInQuint:function(e){return Math.pow(e,5)},easeOutQuint:function(e){return Math.pow(e-1,5)+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)},easeInSine:function(e){return-Math.cos(e*(Math.PI/2))+1},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:-Math.pow(2,-10*e)+1},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(-Math.pow(2,-10*--e)+2)},easeInCirc:function(e){return-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-Math.pow(e-1,2))},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},elastic:function(e){return-1*Math.pow(4,-8*e)*Math.sin((6*e-1)*(2*Math.PI)/2)+1},swingFromTo:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},swingFrom:function(e){var t=1.70158;return e*e*((t+1)*e-t)},swingTo:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},bounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},bouncePast:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?2-(7.5625*(e-=1.5/2.75)*e+.75):e<2.5/2.75?2-(7.5625*(e-=2.25/2.75)*e+.9375):2-(7.5625*(e-=2.625/2.75)*e+.984375)},easeFromTo:function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},easeFrom:function(e){return Math.pow(e,4)},easeTo:function(e){return Math.pow(e,.25)}})}(),function(){function e(e,t,n,a,r,i){function o(e){return((h*e+p)*e+m)*e}function s(e){return((v*e+g)*e+E)*e}function l(e){return(3*h*e+2*p)*e+m}function c(e){return 1/(200*e)}function d(e,t){return s(f(e,t))}function u(e){return e>=0?e:0-e}function f(e,t){var n,a,r,i,s,c;for(r=e,c=0;c<8;c++){if(i=o(r)-e,u(i)<t)return r;if(s=l(r),u(s)<1e-6)break;r-=i/s}if(n=0,a=1,r=e,r<n)return n;if(r>a)return a;for(;n<a;){if(i=o(r),u(i-e)<t)return r;e>i?n=r:a=r,r=.5*(a-n)+n}return r}var h=0,p=0,m=0,v=0,g=0,E=0;return m=3*t,p=3*(a-t)-m,h=1-m-p,E=3*n,g=3*(r-n)-E,v=1-E-g,d(e,c(i))}function t(t,n,a,r){return function(i){return e(i,t,n,a,r,1)}}n.setBezierFunction=function(e,a,r,i,o){var s=t(a,r,i,o);return s.displayName=e,s.x1=a,s.y1=r,s.x2=i,s.y2=o,n.prototype.formula[e]=s},n.unsetBezierFunction=function(e){delete n.prototype.formula[e]}}(),function(){function e(e,t,a,r,i,o){return n.tweenProps(r,t,e,a,1,o,i)}var t=new n;t._filterArgs=[],n.interpolate=function(a,r,i,o,s){var l=n.shallowCopy({},a),c=s||0,d=n.composeEasingObject(a,o||"linear");t.set({});var u=t._filterArgs;u.length=0,u[0]=l,u[1]=a,u[2]=r,u[3]=d,n.applyFilter(t,"tweenCreated"),n.applyFilter(t,"beforeTween");var f=e(a,l,r,i,d,c);return n.applyFilter(t,"afterTween"),f}}(),function(e){function t(e,t){var n,a=[],r=e.length;for(n=0;n<r;n++)a.push("_"+t+"_"+n);return a}function n(e){var t=e.match(T);return t?(1===t.length||e.charAt(0).match(x))&&t.unshift(""):t=["",""],t.join(S)}function a(t){e.each(t,function(e){var n=t[e];"string"==typeof n&&n.match(M)&&(t[e]=r(n))})}function r(e){return l(M,e,i)}function i(e){var t=o(e);return"rgb("+t[0]+","+t[1]+","+t[2]+")"}function o(e){return e=e.replace(/#/,""),3===e.length&&(e=e.split(""),e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),P[0]=s(e.substr(0,2)),P[1]=s(e.substr(2,2)),P[2]=s(e.substr(4,2)),P}function s(e){return parseInt(e,16)}function l(e,t,n){var a=t.match(e),r=t.replace(e,S);if(a)for(var i,o=a.length,s=0;s<o;s++)i=a.shift(),r=r.replace(S,n(i));return r}function c(e){return l(b,e,d)}function d(e){for(var t=e.match(y),n=t.length,a=e.match(w)[0],r=0;r<n;r++)a+=parseInt(t[r],10)+",";return a=a.slice(0,-1)+")"}function u(a){var r={};return e.each(a,function(e){var i=a[e];if("string"==typeof i){var o=g(i);r[e]={formatString:n(i),chunkNames:t(o,e)}}}),r}function f(t,n){e.each(n,function(e){for(var a=t[e],r=g(a),i=r.length,o=0;o<i;o++)t[n[e].chunkNames[o]]=+r[o];delete t[e]})}function h(t,n){e.each(n,function(e){var a=t[e],r=p(t,n[e].chunkNames),i=m(r,n[e].chunkNames);a=v(n[e].formatString,i),t[e]=c(a)})}function p(e,t){for(var n,a={},r=t.length,i=0;i<r;i++)n=t[i],a[n]=e[n],delete e[n];return a}function m(e,t){R.length=0;for(var n=t.length,a=0;a<n;a++)R.push(e[t[a]]);return R}function v(e,t){for(var n=e,a=t.length,r=0;r<a;r++)n=n.replace(S,+t[r].toFixed(4));return n}function g(e){return e.match(y)}function E(t,n){e.each(n,function(e){var a,r=n[e],i=r.chunkNames,o=i.length,s=t[e];if("string"==typeof s){var l=s.split(" "),c=l[l.length-1];for(a=0;a<o;a++)t[i[a]]=l[a]||c}else for(a=0;a<o;a++)t[i[a]]=s;delete t[e]})}function _(t,n){e.each(n,function(e){var a=n[e],r=a.chunkNames,i=r.length,o=t[r[0]],s=typeof o;if("string"===s){for(var l="",c=0;c<i;c++)l+=" "+t[r[c]],delete t[r[c]];t[e]=l.substr(1)}else t[e]=o})}var x=/(\d|\-|\.)/,T=/([^\-0-9\.]+)/g,y=/[0-9.\-]+/g,b=new RegExp("rgb\\("+y.source+/,\s*/.source+y.source+/,\s*/.source+y.source+"\\)","g"),w=/^.*\(/,M=/#([0-9]|[a-f]){3,6}/gi,S="VAL",P=[],R=[];e.prototype.filter.token={tweenCreated:function(e,t,n,r){a(e),a(t),a(n),this._tokenData=u(e)},beforeTween:function(e,t,n,a){E(a,this._tokenData),f(e,this._tokenData),f(t,this._tokenData),f(n,this._tokenData)},afterTween:function(e,t,n,a){h(e,this._tokenData),h(t,this._tokenData),h(n,this._tokenData),_(a,this._tokenData)}}}(n)}).call(null)},function(e,t){function n(e,t,a){e=e||{},t=t||{},a=a||!1;for(var r in t)if(t.hasOwnProperty(r)){var i=e[r],o=t[r];a&&d(i)&&d(o)?e[r]=n(i,o,a):e[r]=o}return e}function a(e,t){var n=e;for(var a in t)if(t.hasOwnProperty(a)){var r=t[a],i="\\{"+a+"\\}",o=new RegExp(i,"g");n=n.replace(o,r)}return n}function r(e,t,n){for(var a=e.style,r=0;r<p.length;++r){var i=p[r];a[i+o(t)]=n}a[t]=n}function i(e,t){u(t,function(t,n){null!==t&&void 0!==t&&(d(t)&&t.prefix===!0?r(e,n,t.value):e.style[n]=t)})}function o(e){return e.charAt(0).toUpperCase()+e.slice(1)}function s(e){return"string"==typeof e||e instanceof String}function l(e){return"function"==typeof e}function c(e){return"[object Array]"===Object.prototype.toString.call(e)}function d(e){if(c(e))return!1;var t=typeof e;return"object"===t&&!!e}function u(e,t){for(var n in e)if(e.hasOwnProperty(n)){var a=e[n];t(a,n)}}function f(e,t){return Math.abs(e-t)<m}function h(e){for(;e.firstChild;)e.removeChild(e.firstChild)}var p="Webkit Moz O ms".split(" "),m=.001;e.exports={extend:n,render:a,setStyle:r,setStyles:i,capitalize:o,isString:s,isFunction:l,isObject:d,forEachObject:u,floatEquals:f,removeChildren:h}},function(e,t,n){var a=n(10),r=n(13),i=function(e,t){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,a.apply(this,arguments)};i.prototype=new a,i.prototype.constructor=i,i.prototype._pathString=function(e){var t=e.strokeWidth;e.trailWidth&&e.trailWidth>e.strokeWidth&&(t=e.trailWidth);var n=50-t/2;return r.render(this._pathTemplate,{radius:n,"2radius":2*n})},i.prototype._trailString=function(e){return this._pathString(e)},e.exports=i},function(e,t,n){var a=n(10),r=n(14),i=n(13),o=function(e,t){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,a.apply(this,arguments)};o.prototype=new a,o.prototype.constructor=o,o.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 50")},o.prototype._initializeTextContainer=function(e,t,n){e.text.style&&(n.style.top="auto",n.style.bottom="0",e.text.alignToBottom?i.setStyle(n,"transform","translate(-50%, 0)"):i.setStyle(n,"transform","translate(-50%, 50%)"))},o.prototype._pathString=r.prototype._pathString,o.prototype._trailString=r.prototype._trailString,e.exports=o},function(e,t){THREE.DDSLoader=function(){this._parser=THREE.DDSLoader.parse},THREE.DDSLoader.prototype=Object.create(THREE.CompressedTextureLoader.prototype),THREE.DDSLoader.prototype.constructor=THREE.DDSLoader,THREE.DDSLoader.parse=function(e,t){function n(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}function a(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}function r(e,t,n,a){for(var r=n*a*4,i=new Uint8Array(e,t,r),o=new Uint8Array(r),s=0,l=0,c=0;c<a;c++)for(var d=0;d<n;d++){var u=i[l];l++;var f=i[l];l++;var h=i[l];l++;var p=i[l];l++,o[s]=h,s++,o[s]=f,s++,o[s]=u,s++,o[s]=p,s++}return o}var i={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},o=542327876,s=131072,l=512,c=1024,d=2048,u=4096,f=8192,h=16384,p=32768,m=4,v=n("DXT1"),g=n("DXT3"),E=n("DXT5"),_=n("ETC1"),x=31,T=0,y=1,b=2,w=3,M=4,S=7,P=20,R=21,L=22,C=23,D=24,A=25,O=26,N=28,I=new Int32Array(e,0,x);if(I[T]!==o)return console.error("THREE.DDSLoader.parse: Invalid magic number in DDS header."),i;if(!I[P]&m)return console.error("THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code."),i;var U,H=I[R],k=!1;switch(H){case v:U=8,i.format=THREE.RGB_S3TC_DXT1_Format;break;case g:U=16,i.format=THREE.RGBA_S3TC_DXT3_Format;break;case E:U=16,i.format=THREE.RGBA_S3TC_DXT5_Format;break;case _:U=8,i.format=THREE.RGB_ETC1_Format;break;default:if(!(32===I[L]&&16711680&I[C]&&65280&I[D]&&255&I[A]&&4278190080&I[O]))return console.error("THREE.DDSLoader.parse: Unsupported FourCC code ",a(H)),i;k=!0,U=64,i.format=THREE.RGBAFormat}i.mipmapCount=1,I[b]&s&&t!==!1&&(i.mipmapCount=Math.max(1,I[S]));var V=I[N];if(i.isCubemap=!!(V&l),i.isCubemap&&(!(V&c)||!(V&d)||!(V&u)||!(V&f)||!(V&h)||!(V&p)))return console.error("THREE.DDSLoader.parse: Incomplete cubemap faces"),i;i.width=I[M],i.height=I[w];for(var B=I[y]+4,F=i.isCubemap?6:1,z=0;z<F;z++)for(var G=i.width,j=i.height,Y=0;Y<i.mipmapCount;Y++){if(k)var X=r(e,B,G,j),W=X.length;else var W=Math.max(4,G)/4*Math.max(4,j)/4*U,X=new Uint8Array(e,B,W);var q={data:X,width:G,height:j};i.mipmaps.push(q),B+=W,G=Math.max(G>>1,1),j=Math.max(j>>1,1)}return i}},function(e,t){THREE.PVRLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this._parser=THREE.PVRLoader.parse},THREE.PVRLoader.prototype=Object.create(THREE.CompressedTextureLoader.prototype),THREE.PVRLoader.prototype.constructor=THREE.PVRLoader,THREE.PVRLoader.parse=function(e,t){var n=13,a=new Uint32Array(e,0,n),r={buffer:e,header:a,loadMipmaps:t};if(55727696===a[0])return THREE.PVRLoader._parseV3(r);if(559044176===a[11])return THREE.PVRLoader._parseV2(r);throw new Error("[THREE.PVRLoader] Unknown PVR format")},THREE.PVRLoader._parseV3=function(e){var t,n,a=e.header,r=a[12],i=a[2],o=a[6],s=a[7],l=(a[9],a[10]),c=a[11];switch(i){case 0:t=2,n=THREE.RGB_PVRTC_2BPPV1_Format;break;case 1:t=2,n=THREE.RGBA_PVRTC_2BPPV1_Format;break;case 2:t=4,n=THREE.RGB_PVRTC_4BPPV1_Format;break;case 3:t=4,n=THREE.RGBA_PVRTC_4BPPV1_Format;break;default:throw new Error("pvrtc - unsupported PVR format "+i)}return e.dataPtr=52+r,e.bpp=t,e.format=n,e.width=s,e.height=o,e.numSurfaces=l,e.numMipmaps=c,e.isCubemap=6===l,THREE.PVRLoader._extract(e)},THREE.PVRLoader._parseV2=function(e){var t,n,a=e.header,r=a[0],i=a[1],o=a[2],s=a[3],l=a[4],t=(a[5],a[6]),c=(a[7],a[8],a[9],a[10]),d=(a[11],a[12]),u=255,f=24,h=25,p=l&u,m=c>0;if(p===h)n=m?THREE.RGBA_PVRTC_4BPPV1_Format:THREE.RGB_PVRTC_4BPPV1_Format,t=4;else{if(p!==f)throw new Error("pvrtc - unknown format "+p);n=m?THREE.RGBA_PVRTC_2BPPV1_Format:THREE.RGB_PVRTC_2BPPV1_Format,t=2}return e.dataPtr=r,e.bpp=t,e.format=n,e.width=o,e.height=i,e.numSurfaces=d,e.numMipmaps=s+1,e.isCubemap=6===d,THREE.PVRLoader._extract(e)},THREE.PVRLoader._extract=function(e){var t={mipmaps:[],width:e.width,height:e.height,format:e.format,mipmapCount:e.numMipmaps,isCubemap:e.isCubemap},n=e.buffer,a=e.dataPtr,r=e.bpp,i=e.numSurfaces,o=0,s=0,l=0,c=0,d=0,u=0;2===r?(l=8,c=4):(l=4,c=4),s=l*c*r/8,t.mipmaps.length=e.numMipmaps*i;for(var f=0;f<e.numMipmaps;){var h=e.width>>f,p=e.height>>f;d=h/l,u=p/c,d<2&&(d=2),u<2&&(u=2),o=d*u*s;for(var m=0;m<i;m++){var v=new Uint8Array(n,a,o),g={data:v,width:h,height:p};t.mipmaps[m*e.numMipmaps+f]=g,a+=o}f++}return t}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={assets:[{name:"backTex",type:"texture",path:"assets/textures/background.png"},{name:"trackTex",type:"texture",path:"assets/textures/road.png"},{name:"numbersTex",type:"texture",path:"assets/textures/numbers.png"},{name:"towerFriendlyTex",type:"texture",path:"assets/textures/tower_friendly.png"},{name:"towerEnemyTex",type:"texture",path:"assets/textures/tower_enemy.png"},{name:"castleFriendlyTex",type:"texture",path:"assets/textures/castle_friendly.png"},{name:"castleEnemyTex",type:"texture",path:"assets/textures/castle_enemy.png"},{name:"castleProgressTex",type:"texture",path:"assets/textures/castle_progress.png"},{name:"castleProgressHandlerTex",type:"texture",path:"assets/textures/castle_progress_handler.png"},{name:"cardBackTex",type:"texture",path:"assets/textures/card_back.png"},{name:"endButtonTex",type:"texture",path:"assets/textures/button_end.png"},{name:"randomButtonTex",type:"texture",path:"assets/textures/button_change.png"},{name:"redUnitTex",type:"texture",path:"assets/textures/soldier_red.png"},{name:"blueUnitTex",type:"texture",path:"assets/textures/soldier_blue.png"},{name:"cardBlue2Tex",type:"texture",path:"assets/textures/card_blue_2.png"},{name:"cardBlue4Tex",type:"texture",path:"assets/textures/card_blue_4.png"},{name:"cardBlue6Tex",type:"texture",path:"assets/textures/card_blue_6.png"},{name:"cardBlue8Tex",type:"texture",path:"assets/textures/card_blue_8.png"},{name:"cardBlue10Tex",type:"texture",path:"assets/textures/card_blue_10.png"},{name:"cardRed2Tex",type:"texture",path:"assets/textures/card_red_2.png"},{name:"cardRed4Tex",type:"texture",path:"assets/textures/card_red_4.png"},{name:"cardRed6Tex",type:"texture",path:"assets/textures/card_red_6.png"},{name:"cardRed8Tex",type:"texture",path:"assets/textures/card_red_8.png"},{name:"cardRed10Tex",type:"texture",path:"assets/textures/card_red_10.png"}],model:{children:[]}};t.default=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={};t.default=n},function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n(21),o=n(22),s=n(23),l=function(){function e(t){a(this,e),this.materialsDescription=t||{},this.materialsCache=[]}return r(e,[{key:"rewriteSingleMaterials",value:function(e,t){var n=this;this.textures=t,e.traverse(function(e){if(e instanceof THREE.Mesh&&!e.name.includes("_instanced"))if(e.material instanceof THREE.MultiMaterial)for(var t=0;t<e.material.materials.length;t++)e.material.materials[t]=n.rewriteSingleMaterial(e.material.materials[t],i,o);else e.material=n.rewriteSingleMaterial(e.material,i,o)})}},{key:"rewriteInstancedMaterial",value:function(e){var t=null;if(e instanceof THREE.MultiMaterial){for(var n=0;n<e.materials.length;n++)e.materials[n]=this.rewriteSingleMaterial(e.materials[n],s,o,!0);t=e}else t=this.rewriteSingleMaterial(e,s,o,!0);return t}},{key:"rewriteCustomMaterial",value:function(e,t,n){var a=null;if(e instanceof THREE.MultiMaterial){for(var r=0;r<e.materials.length;r++)e.materials[r]=this.rewriteSingleMaterial(e.materials[r],t,n,!0);a=e}else a=this.rewriteSingleMaterial(e,t,n,!0);return a}},{key:"rewriteSingleMaterial",value:function(e,t,n,a,r){for(var i=e.name+(a&&!e.name.includes("_instanced")?"_instanced":""),o=0;o<this.materialsCache.length;o++)if(!r&&i===this.materialsCache[o].name)return this.materialsCache[o];var s=THREE.UniformsUtils.clone(THREE.ShaderLib.standard.uniforms);s.map.value=e.map,s.lightMap.value=e.lightMap,s.bumpMap.value=e.bumpMap instanceof THREE.Texture?e.bumpMap:null,s.normalMap.value=e.normalMap instanceof THREE.Texture?e.normalMap:null,s.diffuse.value=e.color?e.color:new THREE.Color(16777215),s.roughnessMap.value=null,s.roughness.value=e.roughness||.6,s.metalness.value=e.metalness||.1,s.ssaoMap={type:"t",value:null},s.ssaoMapIntensity={type:"f",value:1.01},s.screenResolution={type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)};var l=this.materialsDescription[i];l&&this._writeUniformsFromMaterialDescription(s,l);var c=this._getMaterialDefines(s),d=c+t,u=c+n,f=new THREE.RawShaderMaterial({uniforms:s,lights:!0,transparent:s.opacity.value<1||e.transparent,side:e.side,vertexShader:d,fragmentShader:u});return f.name=i,this.materialsCache.push(f),f}},{key:"_writeUniformsFromMaterialDescription",value:function(e,t){e.map.value=this.textures[t.map]||e.map.value,e.normalMap.value=this.textures[t.normalMap]||e.normalMap.value,e.bumpMap.value=this.textures[t.bumpMap]||e.bumpMap.value,e.roughnessMap.value=this.textures[t.roughnessMap]||e.roughnessMap.value,e.diffuse.value=t.color?new THREE.Color(t.color):e.diffuse.value,e.roughness.value=t.roughness||e.roughness.value,e.metalness.value=t.metalness||e.metalness.value,e.opacity.value=t.opacity||1,t.repeat&&(e.offsetRepeat.value.set(0,0,t.repeat[0],t.repeat[1]),e.map.value.wrapS=e.map.value.wrapT=THREE.RepeatWrapping,e.map.value.repeat.set(t.repeat[0],t.repeat[1]),e.normalMap&&e.normalMap.value&&(e.normalMap.value.wrapS=e.normalMap.value.wrapT=THREE.RepeatWrapping,e.normalMap.value.repeat.set(t.repeat[0],t.repeat[1])),e.bumpMap&&e.bumpMap.value&&(e.bumpMap.value.wrapS=e.bumpMap.value.wrapT=THREE.RepeatWrapping,e.bumpMap.value.repeat.set(t.repeat[0],t.repeat[1])),e.roughnessMap&&e.roughnessMap.value&&(e.roughnessMap.value.wrapS=e.roughnessMap.value.wrapT=THREE.RepeatWrapping,e.roughnessMap.value.repeat.set(t.repeat[0],t.repeat[1]))),t.offset&&(e.offsetRepeat.value.x=t.offset[0],e.offsetRepeat.value.y=t.offset[1])}},{key:"_getMaterialDefines",value:function(e){var t="";return e.map.value&&(t+="#define USE_MAP 1\n"),e.lightMap.value&&(t+="#define USE_LIGHTMAP 1\n"),e.bumpMap.value&&(t+="#define USE_BUMPMAP 1\n"),e.normalMap.value&&(t+="#define USE_NORMALMAP 1\n"),e.roughnessMap.value&&(t+="#define USE_ROUGHNESSMAP 1\n"),t}}]),e}();t.default=l},function(e,t){e.exports="#define SHADER_NAME ShaderMaterial\n#define VERTEX_TEXTURES\n#define GAMMA_FACTOR 2\n#define MAX_BONES 251\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n\n#ifdef IS_FOLIAGE\nvarying float vDepth;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n\n#define STANDARD\n\n#define GAMMA_FACTOR 2\n\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif\n\n#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvarying vec3 vReflect;\n\tuniform float refractionRatio;\n#endif\n\n#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n#endif\n\n#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif\n#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif\n\nvoid main() {\n\t#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif\n\t#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif\n\t#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif\n\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n\n#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif\n#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n\n#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\nvec3 transformed = vec3( position );\n\n#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n\n#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n\n#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n\n\tvViewPosition = - mvPosition.xyz;\n#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t#ifdef ENVMAP_MODE_REFLECTION\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t#else\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n    #if NUM_DIR_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n    \t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n    \t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n    \t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n#endif\n}\n"},function(e,t){e.exports="#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\n\n#define SHADER_NAME ShaderMaterial\n#define GAMMA_FACTOR 2\nuniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n#define TONE_MAPPING\n#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n\nvec3 toneMapping( vec3 color ) { return LinearToneMapping( color ); }\n\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n\nvec4 mapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\nvec4 envMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\nvec4 emissiveMapTexelToLinear( vec4 value ) { return LinearToLinear( value ); }\nvec4 linearToOutputTexel( vec4 value ) { return LinearToLinear( value ); }\n\n#define STANDARD\n\n#define GAMMA_FACTOR 2\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifdef IS_FOLIAGE\nvarying float vDepth;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n\n#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n\n#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif\n#if defined( USE_SSAOMAP )\n    uniform highp sampler2D ssaoMap;\n    uniform float ssaoMapIntensity;\n    uniform vec2 screenResolution;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n\n#if defined( USE_ENVMAP ) || defined( STANDARD )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n\n#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\nbool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_Smith( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n\n#ifdef ENVMAP_TYPE_CUBE_UV\nconst float cubeUV_textureSize = 1024.0;\nint getFaceFromDirection(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    int face = -1;\n    if( absDirection.x > absDirection.z ) {\n        if(absDirection.x > absDirection.y )\n            face = direction.x > 0.0 ? 0 : 3;\n        else\n            face = direction.y > 0.0 ? 1 : 4;\n    }\n    else {\n        if(absDirection.z > absDirection.y )\n            face = direction.z > 0.0 ? 2 : 5;\n        else\n            face = direction.y > 0.0 ? 1 : 4;\n    }\n    return face;\n}\nconst float cubeUV_maxLods1 = log2(cubeUV_textureSize*0.25) - 1.0;\nconst float cubeUV_rangeClamp = exp2((6.0 - 1.0) * 2.0);\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n    float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n    float dxRoughness = dFdx(roughness);\n    float dyRoughness = dFdy(roughness);\n    vec3 dx = dFdx( vec * scale * dxRoughness );\n    vec3 dy = dFdy( vec * scale * dyRoughness );\n    float d = max( dot( dx, dx ), dot( dy, dy ) );\n    d = clamp(d, 1.0, cubeUV_rangeClamp);\n    float mipLevel = 0.5 * log2(d);\n    return vec2(floor(mipLevel), fract(mipLevel));\n}\nconst float cubeUV_maxLods2 = log2(cubeUV_textureSize*0.25) - 2.0;\nconst float cubeUV_rcpTextureSize = 1.0 / cubeUV_textureSize;\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n    mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n    float a = 16.0 * cubeUV_rcpTextureSize;\n    vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n    vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n    float powScale = exp2_packed.x * exp2_packed.y;\n    float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n    float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n    bool bRes = mipLevel == 0.0;\n    scale =  bRes && (scale < a) ? a : scale;\n    vec3 r;\n    vec2 offset;\n    int face = getFaceFromDirection(direction);\n    float rcpPowScale = 1.0 / powScale;\n    if( face == 0) {\n        r = vec3(direction.x, -direction.z, direction.y);\n        offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 1) {\n        r = vec3(direction.y, direction.x, direction.z);\n        offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 2) {\n        r = vec3(direction.z, direction.x, direction.y);\n        offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 3) {\n        r = vec3(direction.x, direction.z, direction.y);\n        offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    else if( face == 4) {\n        r = vec3(direction.y, direction.x, -direction.z);\n        offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    else {\n        r = vec3(direction.z, -direction.x, direction.y);\n        offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    r = normalize(r);\n    float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n    vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n    vec2 base = offset + vec2( texelOffset );\n    return base + s * ( scale - 2.0 * texelOffset );\n}\nconst float cubeUV_maxLods3 = log2(cubeUV_textureSize*0.25) - 3.0;\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n    float roughnessVal = roughness* cubeUV_maxLods3;\n    float r1 = floor(roughnessVal);\n    float r2 = r1 + 1.0;\n    float t = fract(roughnessVal);\n    vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n    float s = mipInfo.y;\n    float level0 = mipInfo.x;\n    float level1 = level0 + 1.0;\n    level1 = level1 > 5.0 ? 5.0 : level1;\n    level0 += min( floor( s + 0.5 ), 5.0 );\n    vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n    vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n    vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n    vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n    vec4 result = mix(color10, color20, t);\n    return vec4(result.rgb, 1.0);\n}\n#endif\n\nuniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tirradiance *= PI;\n\n\t\t#endif\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal = 1.0;\n\t\t#endif\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal = 1.0;\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t#endif\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n\nstruct StandardMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n};\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Standard\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Standard\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Standard\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n\n#ifdef USE_SHADOWMAP\n    #if NUM_DIR_LIGHTS > 0\n        uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n        varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n    #endif\n\n    #if NUM_SPOT_LIGHTS > 0\n        uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n        varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n    #endif\n\n    #if NUM_POINT_LIGHTS > 0\n        uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n        varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n    #endif\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\treturn dot( rgba_depth, bit_shift );\n\t}\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n\n#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n\n#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n\n#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif\n#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n \tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\tvec3 totalEmissiveRadiance = emissive;\n\t#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif\n\t#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n\t#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif\n\t#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n\n\t#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n\n\tfloat specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif\n\tfloat roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n\n\tfloat metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n\n\t#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n\n\t#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n\nStandardMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\n\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n    #if ( NUM_HEMI_LIGHTS > 0 )\n    \t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n    \t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n    \t\t}\n    \t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n\n\t#if defined( USE_AOMAP ) || defined ( USE_SSAOMAP )\n    #ifdef USE_AOMAP\n\t   float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n       reflectedLight.indirectDiffuse *= ambientOcclusion;\n    #endif\n    #ifdef USE_SSAOMAP\n       vec2 screenPos = gl_FragCoord.xy / screenResolution;\n\t   float ambientOcclusion = texture2D( ssaoMap, screenPos ).r * ssaoMapIntensity;\n       reflectedLight.indirectDiffuse *= ambientOcclusion;\n    #endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n\n\t#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n\n\t  gl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n\n// #ifdef USE_MAP\n//     gl_FragColor = texture2D( map, vUv );\n//     #endif\n// gl_FragColor.rgb = texture2D( ssaoMap, gl_FragCoord.xy / screenResolution ).rgb;\n}\n";
},function(e,t){e.exports="#define SHADER_NAME ShaderMaterial\n#define VERTEX_TEXTURES\n#define GAMMA_FACTOR 2\n#define MAX_BONES 251\n#define LEAF_AMPLITUDE 80.\n#define LEAF_PERIOD 1.\n#define TREE_AMPLITUDE 0.015\n#define TREE_PERIOD 0.8\n// uniform mat4 modelMatrix;\n// uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nattribute vec4 transform1;\nattribute vec4 transform2;\nattribute vec4 transform3;\nvec4 transform4 = vec4(0.0, 0.0, 0.0, 1.0);\n\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n\n#define STANDARD\n\n#define GAMMA_FACTOR 2\n\nvarying vec3 vViewPosition;\n#ifdef IS_FOLIAGE\nvarying float vDepth;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif\n\n#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvarying vec3 vReflect;\n\tuniform float refractionRatio;\n#endif\n\n#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n#endif\n\n#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif\n#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif\n\nhighp mat4 transpose(in highp mat4 inMatrix) {\n    highp vec4 i0 = inMatrix[0];\n    highp vec4 i1 = inMatrix[1];\n    highp vec4 i2 = inMatrix[2];\n    highp vec4 i3 = inMatrix[3];\n\n    highp mat4 outMatrix = mat4(\n         vec4(i0.x, i1.x, i2.x, i3.x),\n         vec4(i0.y, i1.y, i2.y, i3.y),\n         vec4(i0.z, i1.z, i2.z, i3.z),\n         vec4(i0.w, i1.w, i2.w, i3.w)\n         );\n\n    return outMatrix;\n}\n\nvoid main() {\n    mat4 modelMatrix = transpose(mat4(transform1, transform2, transform3, transform4));\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n\t#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif\n\t#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif\n\t#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif\n\nvec3 tr1 = vec3(transform1.x, transform2.x, transform3.x);\nvec3 tr2 = vec3(transform1.y, transform2.y, transform3.y);\nvec3 tr3 = vec3(transform1.z, transform2.z, transform3.z);\n\nvec3 objectNormal = mat3(tr1, tr2, tr3) * vec3( normal );\n\n#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n\n#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif\n#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n\n#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\nvec3 transformed = vec3( position );\n\n#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n\n#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n\n\n#if defined( IS_TREE ) || defined( IS_FOLIAGE )\nfloat randSeed = transform1.w + transform2.w + transform3.w;\nfloat randomVal = fract(sin(randSeed * 12356.332));\ntransformed.x += randomVal * TREE_AMPLITUDE * cos(time * TREE_PERIOD + randomVal * 20.) * transformed.z;\ntransformed.y += randomVal * TREE_AMPLITUDE * sin(time * TREE_PERIOD + randomVal * 20.) * transformed.z;\n#endif\n#ifdef IS_FOLIAGE\ntransformed += LEAF_AMPLITUDE * normal * cos(time * LEAF_PERIOD + randomVal * 7.) * uv.y;\n#endif\n\n#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n\n#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n\n\tvViewPosition = - mvPosition.xyz;\n#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\nworldPosition.y += time * 1000.;\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t#ifdef ENVMAP_MODE_REFLECTION\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t#else\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t#endif\n#endif\n\n#ifdef USE_SHADOWMAP\n    #if NUM_DIR_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n    \t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n    \t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n    \tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n    \t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n    \t}\n\t#endif\n#endif\n\n#ifdef IS_FOLIAGE\nvDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\n#endif\n}\n"},function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n(25),o=function(){function e(t,n){a(this,e),this.materialDecorator=n,this.model=t}return r(e,[{key:"batchSameGeomIdUndecoratedMeshes",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.batchMeshesWithChildren,a=t.excludeIfNameContains,r=this._formSameGeomObjectsArray(this.model,n,a);r.forEach(function(t){t.length>1&&e._prepBatchFromObjectList(e.model,t,n)})}},{key:"_formSameGeomObjectsArray",value:function(e,t,n){var a=[],r=void 0,i=0;return e.traverse(function(e){for(r=!1,i=0;i<n.length;i++)e.name.includes(n[i])&&(r=!0);if(e instanceof THREE.Mesh&&(!n||!r)&&(t||!e.children||0===e.children.length)){var o=!1;for(i=0;i<a.length;i++)if(a[i][0].geometry.uuid===e.geometry.uuid){a[i].push(e),o=!0;break}o||a.push([e])}}),a}},{key:"formBatchFromMeshAndTransforms",value:function(e,t){var n=this.materialDecorator.rewriteInstancedMaterial(e.material),a=e.material;e.material=n;var r=i.buildFromTransforms(t,e,e.name+"_instancedMesh",new THREE.Vector3(0,0,0),1e4,1e4,1e4);return e.material=a,r}},{key:"_prepBatchFromObjectList",value:function(e,t,n){var a=t.slice(),r=t[0],o=this.materialDecorator.rewriteInstancedMaterial(r.material);r.material=o;var s=i.buildInBox(t,r,r.name+"_instancedMesh",new THREE.Vector3(0,0,0),1e4,1e4,1e4);if(e.add(s),n)for(var l=a.length-1;l>=0;l--){var c=a[l];if(c.children||c.children.length>0)for(var d=c.children.length-1;d>=0;d--){var u=c.children[d];c.remove(u),u.matrix.premultiply(c.matrix),u.matrix.decompose(u.position,u.quaternion,u.scale),c.parent.add(u),u.matrixWorldNeedsUpdate=!0}c.parent.remove(c),a[l]=null}else for(var f=a.length-1;f>=0;f--)a[f].parent.remove(a[f]),a[f]=null}},{key:"propagateTransforms",value:function(e,t){for(var n={transformArray1:[],transformArray2:[],transformArray3:[]},a=new THREE.Matrix4,r=new THREE.Matrix4,i=t.transformArray1,o=t.transformArray2,s=t.transformArray3,l=0;l<i.length;l+=4){a.set(i[l],i[l+1],i[l+2],i[l+3],o[l],o[l+1],o[l+2],o[l+3],s[l],s[l+1],s[l+2],s[l+3],0,0,0,1);for(var c=0;c<e.length;c++)r.multiplyMatrices(a,e[c].matrixWorld),n.transformArray1.push(r.elements[0],r.elements[4],r.elements[8],r.elements[12]),n.transformArray2.push(r.elements[1],r.elements[5],r.elements[9],r.elements[13]),n.transformArray3.push(r.elements[2],r.elements[6],r.elements[10],r.elements[14])}return n}},{key:"removeEmptyObjectsFromScene",value:function(){var e=[];this.model.traverse(function(t){"Object3D"!==t.type||t.children&&0!==t.children.length||e.push(t)});for(var t=e.length-1;t>=0;t--)e[t].parent.remove(e[t]),e[t]=null}}]),e}();t.default=o},function(e,t){"use strict";function n(e,t,n,a){var r=new THREE.Vector3(-t/2,0,-a/2),i=new THREE.Vector3(t/2,n,a/2);return r.add(e),i.add(e),new THREE.Box3(r,i)}function a(e){var t=new THREE.InstancedBufferGeometry;t.setIndex(e.geometry.index);for(var n in e.geometry.attributes)e.geometry.attributes.hasOwnProperty(n)&&t.addAttribute(n,e.geometry.attributes[n]);return t.groups=[],e.geometry.groups.forEach(function(e){return t.addGroup(e.start,e.count,e.materialIndex)}),t}function r(e,t,n){for(var a=[],r=new THREE.Vector3,i=0,o=e.length;i<o;i++)e[i].updateMatrixWorld(!0),e[i].getWorldPosition(r),t.containsPoint(r)?a.push(e[i].matrixWorld.elements):n.push(e[i].matrixWorld.elements);return a}function i(e,t,n,a,r){for(var i=[],o=[],s=[],l=0;l<n.length;l++)i.push(n[l][0]),o.push(n[l][1]),s.push(n[l][2]),i.push(n[l][4]),o.push(n[l][5]),s.push(n[l][6]),i.push(n[l][8]),o.push(n[l][9]),s.push(n[l][10]),i.push(n[l][12]),o.push(n[l][13]),s.push(n[l][14]);var c=new THREE.InstancedBufferAttribute(new Float32Array(i),4,1,!1);e.addAttribute("transform1",c);var d=new THREE.InstancedBufferAttribute(new Float32Array(o),4,1,!1);e.addAttribute("transform2",d);var u=new THREE.InstancedBufferAttribute(new Float32Array(s),4,1,!1);e.addAttribute("transform3",u),e.boundingBox=a,e.boundingSphere=a.getBoundingSphere();var f=new THREE.Mesh(e,t);return f.name=r,f}t.buildInBox=function(e,t,o,s,l,c,d){var u=[],f=n(s,l,c,d),h=a(t),p=r(e,f,u),m=i(h,t.material,p,f,o);return m},t.buildFromTransforms=function(e,t,r,i,o,s,l){var c=n(i,o,s,l),d=a(t),u=new THREE.InstancedBufferAttribute(new Float32Array(e.transformArray1),4,1,!1);d.addAttribute("transform1",u);var f=new THREE.InstancedBufferAttribute(new Float32Array(e.transformArray2),4,1,!1);d.addAttribute("transform2",f);var h=new THREE.InstancedBufferAttribute(new Float32Array(e.transformArray3),4,1,!1);d.addAttribute("transform3",h),d.boundingBox=c,d.boundingSphere=c.getBoundingSphere();var p=new THREE.Mesh(d,t.material);return p.name=r,p},t.addCustomInstanceAttribute=function(e,t,n,a,r,i){for(var o=t.geometry,s=o.attributes.transform1.count,l=r.length/n,c=[],d=0,u=0;d<s;d+=a){u=i?Math.random()*(l-1):u<l?u:0;for(var f=0;f<n;f++)c.push(r[u*n+f]);u++}var h=new THREE.InstancedBufferAttribute(new Float32Array(c),n,a,!1);o.addAttribute(e,h)}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(3),s=a(o);window.THREE=window.THREE||THREE,n(27);var l=function(){function e(t,n){r(this,e),this.camera=t,this.domElement=n,this.orbitControls=new THREE.OrbitControls(t,n),this.orbitControls.enableDamping=!0,this.orbitControls.minDistance=s.default.controls.minDistance,this.orbitControls.maxDistance=s.default.controls.maxDistance,this.orbitControls.rotateSpeed=s.default.controls.rotateSpeed,this.resetCameraOrbit()}return i(e,[{key:"setEnabled",value:function(e){this.orbitControls.enabled=e}},{key:"resetCameraOrbit",value:function(){this.camera.position.fromArray(s.default.camera.pos),this.camera.lookAt((new THREE.Vector3).fromArray(s.default.camera.target)),this.camera.near=s.default.camera.near,this.camera.far=s.default.camera.far,this.camera.updateProjectionMatrix()}},{key:"update",value:function(e){this.orbitControls.update(e)}},{key:"dispose",value:function(){this.orbitControls.dispose()}}]),e}();t.default=l},function(e,t){THREE.OrbitControls=function(e,t){function n(){return 2*Math.PI/60/60*O.autoRotateSpeed}function a(){return Math.pow(.95,O.zoomSpeed)}function r(e){F.theta-=e}function i(e){F.phi-=e}function o(e){O.object instanceof THREE.PerspectiveCamera?z/=e:O.object instanceof THREE.OrthographicCamera?(O.object.zoom=Math.max(O.minZoom,Math.min(O.maxZoom,O.object.zoom*e)),O.object.updateProjectionMatrix(),j=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),O.enableZoom=!1)}function s(e){O.object instanceof THREE.PerspectiveCamera?z*=e:O.object instanceof THREE.OrthographicCamera?(O.object.zoom=Math.max(O.minZoom,Math.min(O.maxZoom,O.object.zoom/e)),O.object.updateProjectionMatrix(),j=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),O.enableZoom=!1)}function l(e){Y.set(e.clientX,e.clientY)}function c(e){Q.set(e.clientX,e.clientY)}function d(e){q.set(e.clientX,e.clientY)}function u(e){X.set(e.clientX,e.clientY),W.subVectors(X,Y);var t=O.domElement===document?O.domElement.body:O.domElement;r(2*Math.PI*W.x/t.clientWidth*O.rotateSpeed),i(2*Math.PI*W.y/t.clientHeight*O.rotateSpeed),Y.copy(X),O.update()}function f(e){J.set(e.clientX,e.clientY),$.subVectors(J,Q),$.y>0?o(a()):$.y<0&&s(a()),Q.copy(J),O.update()}function h(e){Z.set(e.clientX,e.clientY),K.subVectors(Z,q),ne(K.x,K.y),q.copy(Z),O.update()}function p(e){}function m(e){e.deltaY<0?s(a()):e.deltaY>0&&o(a()),O.update()}function v(e){switch(e.keyCode){case O.keys.UP:ne(0,O.keyPanSpeed),O.update();break;case O.keys.BOTTOM:ne(0,-O.keyPanSpeed),O.update();break;case O.keys.LEFT:ne(O.keyPanSpeed,0),O.update();break;case O.keys.RIGHT:ne(-O.keyPanSpeed,0),O.update()}}function g(e){Y.set(e.touches[0].pageX,e.touches[0].pageY)}function E(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,a=Math.sqrt(t*t+n*n);Q.set(0,a)}function _(e){q.set(e.touches[0].pageX,e.touches[0].pageY)}function x(e){X.set(e.touches[0].pageX,e.touches[0].pageY),W.subVectors(X,Y);var t=O.domElement===document?O.domElement.body:O.domElement;r(2*Math.PI*W.x/t.clientWidth*O.rotateSpeed),i(2*Math.PI*W.y/t.clientHeight*O.rotateSpeed),Y.copy(X),O.update()}function T(e){var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);J.set(0,r),$.subVectors(J,Q),$.y>0?s(a()):$.y<0&&o(a()),Q.copy(J),O.update()}function y(e){Z.set(e.touches[0].pageX,e.touches[0].pageY),K.subVectors(Z,q),ne(K.x,K.y),q.copy(Z),O.update()}function b(e){}function w(e){if(O.enabled!==!1){if(e.preventDefault(),e.button===O.mouseButtons.ORBIT){if(O.enableRotate===!1)return;l(e),k=H.ROTATE}else if(e.button===O.mouseButtons.ZOOM){if(O.enableZoom===!1)return;c(e),k=H.DOLLY}else if(e.button===O.mouseButtons.PAN){if(O.enablePan===!1)return;d(e),k=H.PAN}k!==H.NONE&&(document.addEventListener("mousemove",M,!1),document.addEventListener("mouseup",S,!1),O.dispatchEvent(I))}}function M(e){if(O.enabled!==!1)if(e.preventDefault(),k===H.ROTATE){if(O.enableRotate===!1)return;u(e)}else if(k===H.DOLLY){if(O.enableZoom===!1)return;f(e)}else if(k===H.PAN){if(O.enablePan===!1)return;h(e)}}function S(e){O.enabled!==!1&&(p(e),document.removeEventListener("mousemove",M,!1),document.removeEventListener("mouseup",S,!1),O.dispatchEvent(U),k=H.NONE)}function P(e){O.enabled===!1||O.enableZoom===!1||k!==H.NONE&&k!==H.ROTATE||(e.preventDefault(),e.stopPropagation(),m(e),O.dispatchEvent(I),O.dispatchEvent(U))}function R(e){O.enabled!==!1&&O.enableKeys!==!1&&O.enablePan!==!1&&v(e)}function L(e){if(O.enabled!==!1){switch(e.touches.length){case 1:if(O.enableRotate===!1)return;g(e),k=H.TOUCH_ROTATE;break;case 2:if(O.enableZoom===!1)return;E(e),k=H.TOUCH_DOLLY;break;case 3:if(O.enablePan===!1)return;_(e),k=H.TOUCH_PAN;break;default:k=H.NONE}k!==H.NONE&&O.dispatchEvent(I)}}function C(e){if(O.enabled!==!1)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(O.enableRotate===!1)return;if(k!==H.TOUCH_ROTATE)return;x(e);break;case 2:if(O.enableZoom===!1)return;if(k!==H.TOUCH_DOLLY)return;T(e);break;case 3:if(O.enablePan===!1)return;if(k!==H.TOUCH_PAN)return;y(e);break;default:k=H.NONE}}function D(e){O.enabled!==!1&&(b(e),O.dispatchEvent(U),k=H.NONE)}function A(e){e.preventDefault()}this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new THREE.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-(1/0),this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return B.phi},this.getAzimuthalAngle=function(){return B.theta},this.reset=function(){O.target.copy(O.target0),O.object.position.copy(O.position0),O.object.zoom=O.zoom0,O.object.updateProjectionMatrix(),O.dispatchEvent(N),O.update(),k=H.NONE},this.update=function(){var t=new THREE.Vector3,a=(new THREE.Quaternion).setFromUnitVectors(e.up,new THREE.Vector3(0,1,0)),i=a.clone().inverse(),o=new THREE.Vector3,s=new THREE.Quaternion;return function(){var e=O.object.position;return t.copy(e).sub(O.target),t.applyQuaternion(a),B.setFromVector3(t),O.autoRotate&&k===H.NONE&&r(n()),B.theta+=F.theta,B.phi+=F.phi,B.theta=Math.max(O.minAzimuthAngle,Math.min(O.maxAzimuthAngle,B.theta)),B.phi=Math.max(O.minPolarAngle,Math.min(O.maxPolarAngle,B.phi)),B.makeSafe(),B.radius*=z,B.radius=Math.max(O.minDistance,Math.min(O.maxDistance,B.radius)),O.target.add(G),t.setFromSpherical(B),t.applyQuaternion(i),e.copy(O.target).add(t),O.object.lookAt(O.target),O.enableDamping===!0?(F.theta*=1-O.dampingFactor,F.phi*=1-O.dampingFactor):F.set(0,0,0),z=1,G.set(0,0,0),!!(j||o.distanceToSquared(O.object.position)>V||8*(1-s.dot(O.object.quaternion))>V)&&(O.dispatchEvent(N),o.copy(O.object.position),s.copy(O.object.quaternion),j=!1,!0)}}(),this.dispose=function(){O.domElement.removeEventListener("contextmenu",A,!1),O.domElement.removeEventListener("mousedown",w,!1),O.domElement.removeEventListener("wheel",P,!1),O.domElement.removeEventListener("touchstart",L,!1),O.domElement.removeEventListener("touchend",D,!1),O.domElement.removeEventListener("touchmove",C,!1),document.removeEventListener("mousemove",M,!1),document.removeEventListener("mouseup",S,!1),window.removeEventListener("keydown",R,!1)};var O=this,N={type:"change"},I={type:"start"},U={type:"end"},H={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},k=H.NONE,V=1e-6,B=new THREE.Spherical,F=new THREE.Spherical,z=1,G=new THREE.Vector3,j=!1,Y=new THREE.Vector2,X=new THREE.Vector2,W=new THREE.Vector2,q=new THREE.Vector2,Z=new THREE.Vector2,K=new THREE.Vector2,Q=new THREE.Vector2,J=new THREE.Vector2,$=new THREE.Vector2,ee=function(){var e=new THREE.Vector3;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),G.add(e)}}(),te=function(){var e=new THREE.Vector3;return function(t,n){e.setFromMatrixColumn(n,1),e.multiplyScalar(t),G.add(e)}}(),ne=function(){var e=new THREE.Vector3;return function(t,n){var a=O.domElement===document?O.domElement.body:O.domElement;if(O.object instanceof THREE.PerspectiveCamera){var r=O.object.position;e.copy(r).sub(O.target);var i=e.length();i*=Math.tan(O.object.fov/2*Math.PI/180),ee(2*t*i/a.clientHeight,O.object.matrix),te(2*n*i/a.clientHeight,O.object.matrix)}else O.object instanceof THREE.OrthographicCamera?(ee(t*(O.object.right-O.object.left)/O.object.zoom/a.clientWidth,O.object.matrix),te(n*(O.object.top-O.object.bottom)/O.object.zoom/a.clientHeight,O.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),O.enablePan=!1)}}();O.domElement.addEventListener("contextmenu",A,!1),O.domElement.addEventListener("mousedown",w,!1),O.domElement.addEventListener("wheel",P,!1),O.domElement.addEventListener("touchstart",L,!1),O.domElement.addEventListener("touchend",D,!1),O.domElement.addEventListener("touchmove",C,!1),window.addEventListener("keydown",R,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}})},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=function(){function e(t){n(this,e),this.mesh=new THREE.Object3D,this.mesh.name="env_root",this.mesh.add(this._createBack(t.textures.backTex)),this.mesh.add(this._createShuffleButton(t.textures.randomButtonTex)),this.mesh.add(this._createEndButton(t.textures.endButtonTex))}return a(e,[{key:"_createBack",value:function(e){var t=new THREE.PlaneBufferGeometry(.666,1),n=new THREE.MeshBasicMaterial({map:e}),a=new THREE.Mesh(t,n);return a}},{key:"_createShuffleButton",value:function(e){var t=new THREE.PlaneBufferGeometry(.16,.05),n=new THREE.MeshBasicMaterial({map:e,transparent:!0});return this.shuffleButton=new THREE.Mesh(t,n),this.shuffleButton.name="shuffle_button",this.shuffleButton.userData.defaultColor=new THREE.Color(16777215),this.shuffleButton.userData.selectedColor=new THREE.Color(13369344),this.shuffleButton.userData.inactiveColor=new THREE.Color(6710886),this.shuffleButton.position.x=-.23,this.shuffleButton.position.y=-.27,this.shuffleButton.position.z=1.8,this.shuffleButton}},{key:"_createEndButton",value:function(e){var t=new THREE.PlaneBufferGeometry(.16,.05),n=new THREE.MeshBasicMaterial({map:e,transparent:!0});return this.endButton=new THREE.Mesh(t,n),this.endButton.name="end_button",this.endButton.userData.defaultColor=new THREE.Color(16777215),this.endButton.userData.selectedColor=new THREE.Color(13369344),this.endButton.userData.inactiveColor=new THREE.Color(6710886),this.endButton.position.x=.23,this.endButton.position.y=-.27,this.endButton.position.z=1.8,this.endButton}}]),e}();t.default=r},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=.02,i=.04,o=.06,s=[[[0,0]],[[-r,0],[r,0]],[[-r,-r],[r,-r],[0,r]],[[-r,-r],[r,-r],[-r,r],[r,r]],[[-i,-r],[0,-r],[i,-r],[-r,r],[r,r]],[[-i,-r],[0,-r],[i,-r],[-i,r],[0,r],[i,r]],[[-i,-i],[0,-i],[i,-i],[-i,0],[0,0],[i,0],[0,i]],[[-i,-i],[0,-i],[i,-i],[-i,0],[0,0],[i,0],[-r,i],[r,i]],[[-i,-i],[0,-i],[i,-i],[-i,0],[0,0],[i,0],[-i,i],[0,i],[i,i]],[[-o,-i],[-r,-i],[r,-i],[o,-i],[-o,0],[-r,0],[r,0],[o,0],[-r,i],[r,i]]],l=function(){function e(t){n(this,e),this.mesh=new THREE.Object3D,this.mesh.name="tracks_root";for(var a=0;a<3;++a){var r=this._createTrack(t.textures.trackTex);r.position.x=.19*a-.19,r.position.y=.1,r.userData.index=a,this.mesh.add(r);
}this._assets=t}return a(e,[{key:"_createTrack",value:function(e){var t=new THREE.PlaneBufferGeometry(.175,.5),n=new THREE.MeshBasicMaterial({map:e}),a=new THREE.Mesh(t,n);return a.userData.defaultColor=new THREE.Color(16777215),a.userData.selectedColor=new THREE.Color(13391189),a.position.z=.1,a}},{key:"clearTracks",value:function(){this.mesh.children.forEach(function(e){for(var t=e.children.length-1;t>=0;--t)e.remove(e.children[t])})}},{key:"_createUnitSoldier",value:function(e){var t="red"===e?"redUnitTex":"blueUnitTex",n=this._assets.textures[t],a=new THREE.PlaneBufferGeometry(.04,.04),r=new THREE.MeshBasicMaterial({map:n,transparent:!0});return new THREE.Mesh(a,r)}},{key:"_createUnit",value:function(e,t){for(var n=new THREE.Object3D,a=0;a<e;++a){var r=this._createUnitSoldier(t);r.position.x=s[e-1][a][0],r.position.y=s[e-1][a][1],n.add(r)}return n}},{key:"spawnUnitOnTrack",value:function(e,t,n){var a=this.mesh.children[t],r=this._createUnit(n.damage,n.color);r.userData.friendly=e;var i="red"===n.color?1:-1;r.userData.damage=n.damage*i,r.position.y=r.userData.friendly?-.07:.07,a.add(r)}},{key:"hasUnitOnTrack",value:function(e,t){return!!this.getUnitOnTrack(e,t)}},{key:"getUnitOnTrack",value:function(e,t){for(var n=this.mesh.children[t],a=0;a<n.children.length;++a)if(n.children[a].userData.friendly===e)return n.children[a];return null}},{key:"_spawnResolvedUnit",value:function(e,t,n){var a=n>0?"red":"blue",r=this._createUnit(Math.abs(n),a);r.userData.friendly=e,r.position.y=r.userData.friendly?.09:-.09,this.mesh.children[t].add(r)}},{key:"applyDamageOnTrack",value:function(e){var t=this.getUnitOnTrack(!0,e),n=this.getUnitOnTrack(!1,e),a=t?t.userData.damage:0,r=n?n.userData.damage:0;t&&t.parent.remove(t),n&&n.parent.remove(n);var i=null,o=Math.abs(a)-Math.abs(r);if(0!==o)if(o>0){var s=o*Math.sign(a);this._spawnResolvedUnit(!0,e,s),i={playerWon:!0,damage:s}}else{var l=-o*Math.sign(r);this._spawnResolvedUnit(!1,e,l),i={playerWon:!1,damage:l}}return i}}]),e}();t.default=l},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(5),s=a(o),l=n(3),c=a(l),d=n(31),u=a(d),f=[[-.19,-.13],[0,-.13],[.19,-.13]],h=[[-.19,.37],[0,.37],[.19,.37]],p=.26,m=.014,v=function(){function e(t){r(this,e),this._assets=t,this.mesh=new THREE.Object3D,this.mesh.name="towers_root",this._friendlyTowersT=[],this._enemyTowersT=[];for(var n=0;n<f.length;++n){var a=this._createTower(t.textures.towerFriendlyTex);a.position.x=f[n][0],a.position.y=f[n][1],this.mesh.add(a),this._friendlyTowersT[n]=new u.default(this._assets).setSize(.1).setValue(0),a.add(this._friendlyTowersT[n].mesh)}for(var i=0;i<h.length;++i){var o=this._createTower(t.textures.towerEnemyTex);o.position.x=h[i][0],o.position.y=h[i][1],this.mesh.add(o),this._enemyTowersT[i]=new u.default(this._assets).setSize(.1).setValue(0),o.add(this._enemyTowersT[i].mesh)}var s=this._createCastle(t.textures.castleFriendlyTex);s.position.y=-.174,this.mesh.add(s);var l=this._createCastle(t.textures.castleEnemyTex);l.position.y=.32,this.mesh.add(l);var c=this._createTermometer(t.textures.castleProgressTex,p,m);c.position.y=-.26,this.mesh.add(c),this._friendlyT=this._createTermometerHandler(),this._friendlyT.position.y=-.26,this.mesh.add(this._friendlyT);var d=this._createTermometer(t.textures.castleProgressTex,p,m);d.position.y=.47,this.mesh.add(d),this._enemyT=this._createTermometerHandler(),this._enemyT.position.y=.47,this.mesh.add(this._enemyT)}return i(e,[{key:"setTowerTemperature",value:function(e,t,n){var a=e?this._friendlyTowersT[t]:this._enemyTowersT[t];a.setValue(n)}},{key:"updatePlayerTemperatures",value:function(){this._friendlyT.position.x=s.default.playerT/c.default.game.maxT*p/2,this._enemyT.position.x=s.default.enemyT/c.default.game.maxT*p/2}},{key:"_createTower",value:function(e){var t=new THREE.Mesh(new THREE.PlaneBufferGeometry(.16,.16),new THREE.MeshBasicMaterial({map:e,transparent:!0}));return t.position.z=1,t}},{key:"_createTermometer",value:function(e,t,n){var a=new THREE.Mesh(new THREE.PlaneBufferGeometry(t,n),new THREE.MeshBasicMaterial({map:e,transparent:!0}));return a.position.z=.2,a}},{key:"_createTermometerHandler",value:function(){var e=new THREE.Mesh(new THREE.PlaneBufferGeometry(.024,.024),new THREE.MeshBasicMaterial({map:this._assets.textures.castleProgressHandlerTex,transparent:!0}));return e.position.z=.3,e}},{key:"_createCastle",value:function(e){var t=new THREE.Mesh(new THREE.PlaneBufferGeometry(.62,.1),new THREE.MeshBasicMaterial({map:e,transparent:!0}));return t.position.z=1.1,t}}]),e}();t.default=v},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(32),s=a(o),l=n(33),c=a(l),d=function(){function e(t){r(this,e),this._assets=t,this.mesh=new THREE.Object3D,this.mesh.position.z=.3}return i(e,[{key:"setSize",value:function(e){return this.mesh.scale.x=e,this.mesh.scale.y=e,this}},{key:"setValue",value:function(e){for(var t=this.mesh.children.length-1;t>=0;--t)this.mesh.remove(this.mesh.children[t]);var n=e>0,a=Math.abs(e),r=a<10;if(r){var i=this._createVisual(a,n);this.mesh.add(i)}else{var o=Math.floor(a/10),s=a-10*o,l=this._createVisual(o,n);l.position.x=-.5,this.mesh.add(l);var c=this._createVisual(s,n);c.position.x=.5,this.mesh.add(c)}return this}},{key:"_createVisual",value:function(e,t){var n=new THREE.PlaneBufferGeometry(1,1),a={scaleX:{value:5},scaleY:{value:2},quadNumber:{value:e},isPositive:{value:t?1:0},map:{value:this._assets.textures.numbersTex}},r=new THREE.RawShaderMaterial({vertexShader:s.default,fragmentShader:c.default,uniforms:a,transparent:!0}),i=new THREE.Mesh(n,r);return i}}]),e}();t.default=d},function(e,t){e.exports="precision highp float;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\n\nuniform float scaleX;\nuniform float scaleY;\nuniform float quadNumber;\n\nvarying vec2 vUv;\n\nvoid main() {\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    float y = floor(quadNumber / scaleX);\n    float x = quadNumber - scaleX * y;\n    vUv = (uv + vec2(x, y)) / vec2(scaleX, scaleY);\n}\n"},function(e,t){e.exports="precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform float isPositive; // todo: multiplyColor\n\nvoid main() {\n    vec3 color = mix(vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), isPositive);\n    gl_FragColor = texture2D(map, vUv);\n    gl_FragColor.rgb *= color;\n}\n"},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=[[-.21,-.395],[-.21+.14,-.395],[-.21+.28,-.395],[.21,-.395]],i=function(){function e(t){n(this,e),this.mesh=new THREE.Object3D,this.mesh.name="cards_root";for(var a=0;a<r.length;++a){var i=this._createCard(t.textures.cardBackTex);i.position.x=r[a][0],i.position.y=r[a][1],i.userData.friendly=!0,i.userData.index=a,i.userData.initPosX=i.position.x,i.userData.initPosY=i.position.y,i.position.z=2,this.mesh.add(i)}this._assets=t}return a(e,[{key:"_createCard",value:function(e){var t=new THREE.PlaneBufferGeometry(.124,.17),n=new THREE.MeshBasicMaterial({map:e,transparent:!0}),a=new THREE.Mesh(t,n);return a}},{key:"_createContent",value:function(e){var t=new THREE.PlaneBufferGeometry(.1,.1),n=new THREE.MeshBasicMaterial({map:e,transparent:!0}),a=new THREE.Mesh(t,n);return a}},{key:"updatePlayerCard",value:function(e,t){var n=this;this.mesh.children.forEach(function(a){if(a.userData.index===e){for(var r=a.children.length-1;r>=0;--r)a.remove(a.children[r]);var i=n._createContent(n._assets.textures[t.texName]);a.add(i),a.visible=!0}})}},{key:"hideCard",value:function(e){this.mesh.children.forEach(function(t){t.userData.index===e&&(t.visible=!1)})}}]),e}();t.default=i},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=n(5),s=a(o),l=n(3),c=a(l),d=function(){function e(t){r(this,e),this.context=t}return i(e,[{key:"makeTurn",value:function(e){var t=this,n=c.default.game.maxT,a=s.default.enemyHand,r=s.default.playerT,i=s.default.enemyT,o=s.default.towersT[0],l=s.default.towersT[1];console.log("isAttack:",e,", hand:",a[0],a[1],a[2],a[3],"maxT",n,"temperatures:",r,i,"towers:",o,l),this.doSomething("ok");for(var d=function(e){var n=e;setTimeout(function(){t.context.playCard(!1,n,e)},500*(e+1))},u=0;u<3;++u)d(u);setTimeout(function(){t.context.nextPhase()},2e3)}},{key:"doSomething",value:function(e){console.log("doing somthing",e)}}]),e}();t.default=d},function(e,t){"use strict";function n(){return a[Math.floor(Math.random()*a.length)]}Object.defineProperty(t,"__esModule",{value:!0}),t.generateCard=n;var a=[{id:0,color:"red",damage:2,price:1,texName:"cardRed2Tex"},{id:1,color:"red",damage:4,price:2,texName:"cardRed4Tex"},{id:2,color:"red",damage:6,price:3,texName:"cardRed6Tex"},{id:3,color:"red",damage:8,price:4,texName:"cardRed8Tex"},{id:4,color:"red",damage:10,price:5,texName:"cardRed10Tex"},{id:5,color:"blue",damage:2,price:-1,texName:"cardBlue2Tex"},{id:6,color:"blue",damage:4,price:-2,texName:"cardBlue4Tex"},{id:7,color:"blue",damage:6,price:-3,texName:"cardBlue6Tex"},{id:8,color:"blue",damage:8,price:-4,texName:"cardBlue8Tex"},{id:9,color:"blue",damage:10,price:-5,texName:"cardBlue10Tex"}]},function(e,t){"use strict";e.exports=function(){if(window.WebGLRenderingContext){for(var e=document.createElement("canvas"),t=["webgl","experimental-webgl","moz-webgl"],n=!1,a=0;a<t.length;a++)try{if(n=e.getContext(t[a]),n&&"function"==typeof n.getParameter)return!0}catch(e){console.log("Unable to initialize WebGL. Your browser may not support it.")}return!1}return!1}}]);